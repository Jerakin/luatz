local luatz = require "luatz.luatz"

-- We do this a few times ==> Convert a timestamp to timetable and normalise
local function ts2tt(ts)
	return luatz.timetable.new_from_timestamp(ts)
end

------------------------------------------------------------------------------
function load_resource(filename)

	local file = sys.load_resource(filename)
	return file
end


------------------------------------------------------------------------------
function load_json_from_resource(filename)

	local file = load_resource(filename)
	if file then

		local json_data = nil
		-- Use pcall to catch possible parse errors so that we can print out the name of the file that we failed to parse
		if pcall(function() json_data = json.decode(file) end) then
			return json_data
		else
			log.assert(nil, "Error parsing json data from file: " .. filename)
			return nil
		end

	end

	log.error("Unable to load json file '" .. filename .. "'")
	return nil
end


function init(self)
	-- Get the current time in UTC
	local utcnow = luatz.time()
	local now = ts2tt(utcnow)
	print(now, "now (UTC)")
	
	local l = {"Africa/Algiers","Africa/Cairo",
	"Africa/Casablanca", "Africa/Ceuta",
	"Africa/El_Aaiun",	"Africa/Johannesburg",
	"Africa/Juba"}
	for _, loc in pairs(l) do 
		-- Find out what time it is in Melbourne at the moment
		local melbourne = luatz.get_tz(loc .. ".tz")
		local now_in_melbourne = ts2tt(melbourne:localise(utcnow))
		print(now_in_melbourne, loc)
	end
	


end
